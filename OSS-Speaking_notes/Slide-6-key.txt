service discovery is the process of figuring out how to connect to a service.  Kubernetes service discovery finds services through two approaches:

•	Using the environment variables
•	Using DNS-based service discovery to resolve the service names to the service’s IP address.
 
Load balancing identifies containers by the DNS name or even IP address and redistributes traffic from high-load to low-load areas depending on the traffic congestion.

Storage orchestration
Kubernetes natively provides some solutions to manage storage.
This feature allows automatic mounting of any storage type of your choice, from local storage, a public cloud provider such as AWS, Azure, GCP, etc., or any network storage system.

 
Secret and configuration management
Secret and configuration management is a critical feature of Kubernetes that plays a significant role in enhancing the security of your applications. It provides a secure mechanism for storing confidential information, such as passwords, API keys, and other credentials, by encrypting them and controlling access to them via role-based access control (RBAC).

Moreover, Kubernetes also offers robust configuration management capabilities, enabling you to manage application configuration data efficiently. By maintaining the consistency of the application's functional, authentication, performance, and physical attributes, it helps avoid configuration drift and ensures that your application runs smoothly across different environments.

Automatic bin packing
This is one of the significant features of Kubernetes. This is where Kubernetes helps in automatically placing containers based on their resource requirements, limits, and other constraints, without compromising on availability.
It is very efficient to mix critical and best-effort workloads to manage utilization and save more resources. 
Kubernetes can manage resources, and can automatically specify how each container in a pod uses CPU, Memory, etc.

Self-healing
This feature of Kubernetes acts as a superhuman. Containers that fail because of any reason are automatically restarted.  If any node fails, the containers that were running on the failed node are redistributed to other nodes. 
Kubernetes automatically stops the unresponsive containers if they do not respond to the user-defined health checks and restrict traffic until the containers are ready.




Automated rollouts and rollbacks
This feature allows teams working on Kubernetes to define the state of deployed containers, systematically roll out changes with ease, and automatically roll back on failure or in any cases of emergency or alerts.

Kubernetes abstractions
To manage containerized applications, Kubernetes uses a set of abstractions, including deployments, replicasets, pods & services
These abstractions allow Kubernetes to manage containerized microservice applications at scale and provide a consistent and predictable environment for application delivery.

